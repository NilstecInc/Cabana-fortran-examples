add_executable(ForParallelForUnmanaged Fortran_main.F90 Fortran_kernels.F90 parallel_for_example.cpp)
target_link_libraries(ForParallelForUnmanaged Cabana::cabanacore ${MPI_Fortran_LIBRARIES})
add_test(NAME Fortran_advance_example_04 COMMAND ForParallelForUnmanaged)
set_property(TARGET ForParallelForUnmanaged PROPERTY LINKER_LANGUAGE Fortran)
include_directories(${MPI_Fortran_INCLUDE_PATH} ${CMAKE_CURRENT_BINARY_DIR}/../Fortran_features)

if (("${CMAKE_Fortran_COMPILER_ID}" STREQUAL "PGI") AND ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "PGI"))
  if( Kokkos_ENABLE_CUDA )
    target_compile_definitions(ForParallelForUnmanaged PUBLIC -DUSE_GPU=1)
    set(CMAKE_Fortran_FLAGS "${CMAKE_Fortran_FLAGS} -acc=gpu -cuda -gpu=cc70,cuda11.1,rdc")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --relocatable-device-code=true")
    set(CMAKE_EXE_LINKER_FLAGS "-acc=gpu -cuda -gpu=cc70,cuda11.1,rdc")
  elseif( Cabana_ENABLE_OpenMP )
    target_compile_definitions(ForParallelForUnmanaged PUBLIC -DUSE_GPU=0)
    set(CMAKE_Fortran_FLAGS "-ta=multicore -mp")
  elseif( Cabana_ENABLE_Serial )
    target_compile_definitions(ForParallelForUnmanaged PUBLIC -DUSE_GPU=0)
    set(CMAKE_Fortran_FLAGS "-ta=host")
  endif()
  
  set(CMAKE_EXE_LINKER_FLAGS "-pgc++libs")
else()
  if( Kokkos_ENABLE_CUDA )
    message("Only PGI is supported for compiling fortran cuda code. Right now
    we only accept building with PGI for both CXX and Fortran to avoid mixing
    compiler families.\n Skip.")
    return()
  elseif( Cabana_ENABLE_OpenMP )
    target_compile_definitions(ForParallelForUnmanaged PUBLIC -DUSE_GPU=0)
    set(CMAKE_Fortran_FLAGS "-fopenmp")
  elseif( Cabana_ENABLE_Serial )
    target_compile_definitions(ForParallelForUnmanaged PUBLIC -DUSE_GPU=0)
  endif()
endif()
